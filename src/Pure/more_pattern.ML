(*  Title:      Pure/more_pattern.ML
    Author:     Tobias Nipkow, TU Muenchen
    Author:     Stefan Berghofer, TU Muenchen

Add-ons to Higher-Order Patterns, outside the inference kernel.
*)

signature PATTERN =
sig
  include PATTERN
  val matches: theory -> term * term -> bool
  val matchess: theory -> term list * term list -> bool
  val equiv: theory -> term * term -> bool
  val first_order: term -> bool
  val match_rew: theory -> term -> term * term -> (term * term) option
  val rewrite_term: theory -> (term * term) list -> (term -> term option) list -> term -> term
  val rewrite_term_top: theory -> (term * term) list -> (term -> term option) list -> term -> term
end;

structure Pattern: PATTERN =
struct

fun matches thy po =
  (Pattern.match thy po (Vartab.empty, Vartab.empty); true) handle Pattern.MATCH => false;

fun matchess thy (ps, os) =
  length ps = length os andalso
    ((fold (Pattern.match thy) (ps ~~ os) (Vartab.empty, Vartab.empty); true)
      handle Pattern.MATCH => false);

fun equiv thy (t, u) = matches thy (t, u) andalso matches thy (u, t);

fun first_order (Abs (_, _, t)) = first_order t
  | first_order (Var _ $ _) = false
  | first_order (t $ u) = first_order t andalso first_order u
  | first_order _ = true;


(* rewriting -- simple but fast *)

fun match_rew thy tm (tm1, tm2) =
  let val rtm = perhaps (Term.rename_abs tm1 tm) tm2 in
    SOME (Envir.subst_term (Pattern.match thy (tm1, tm) (Vartab.empty, Vartab.empty)) rtm, rtm)
      handle Pattern.MATCH => NONE
  end;

local

val skel0 = Bound 0;
val skel_fun = fn skel $ _ => skel | _ => skel0;
val skel_arg = fn _ $ skel => skel | _ => skel0;
val skel_body = fn Abs (_, _, skel) => skel | _ => skel0;

fun gen_rewrite_term bot thy rules procs term =
  let
    fun variant_absfree bounds x tm =
      let
        val ((x', T), t') =
          Term.dest_abs_fresh (Name.bound bounds) tm
            handle Term.USED_FREE _ => Term.dest_abs_global tm;  (* FIXME proper context *)
        fun abs u = Abs (x, T, abstract_over (Free (x', T), u));
      in (abs, t') end;

    fun rew (Abs (_, _, body) $ t) = SOME (subst_bound (t, body), skel0)
      | rew tm =
          (case get_first (match_rew thy tm) rules of
            NONE => Option.map (rpair skel0) (get_first (fn proc => proc tm) procs)
          | some => some);

    fun rew_sub r bounds _ (Abs (_, _, body) $ t) =
          let val t' = subst_bound (t, body)
          in SOME (the_default t' (rew_sub r bounds skel0 t')) end
      | rew_sub r bounds skel (t1 $ t2) =
          (case r bounds (skel_fun skel) t1 of
            SOME t1' =>
              (case r bounds (skel_arg skel) t2 of
                SOME t2' => SOME (t1' $ t2')
              | NONE => SOME (t1' $ t2))
          | NONE =>
              (case r bounds (skel_arg skel) t2 of
                SOME t2' => SOME (t1 $ t2')
              | NONE => NONE))
      | rew_sub r bounds skel (tm as Abs (x, _, _)) =
          let val (abs, tm') = variant_absfree bounds x tm in
            (case r (bounds + 1) (skel_body skel) tm' of
              SOME tm'' => SOME (abs tm'')
            | NONE => NONE)
          end
      | rew_sub _ _ _ _ = NONE;

    fun rew_bot _ (Var _) _ = NONE
      | rew_bot bounds skel tm =
          (case rew_sub rew_bot bounds skel tm of
            SOME tm1 =>
              (case rew tm1 of
                SOME (tm2, skel') => SOME (the_default tm2 (rew_bot bounds skel' tm2))
              | NONE => SOME tm1)
          | NONE => (case rew tm of
                SOME (tm1, skel') => SOME (the_default tm1 (rew_bot bounds skel' tm1))
              | NONE => NONE));

    fun rew_top bounds _ tm =
      (case rew tm of
        SOME (tm1, _) =>
          (case rew_sub rew_top bounds skel0 tm1 of
            SOME tm2 => SOME (the_default tm2 (rew_top bounds skel0 tm2))
          | NONE => SOME tm1)
      | NONE =>
          (case rew_sub rew_top bounds skel0 tm of
            SOME tm1 => SOME (the_default tm1 (rew_top bounds skel0 tm1))
          | NONE => NONE));

  in the_default term ((if bot then rew_bot else rew_top) 0 skel0 term) end;

in

val rewrite_term = gen_rewrite_term true;
val rewrite_term_top = gen_rewrite_term false;

end;

open Pattern;

end;
